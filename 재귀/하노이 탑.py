# n-1개의 원판을 기둥 1에서 기둥 2로 옮긴 후 n의 원판을 기둥 1에서 기둥 3으로 옮긴다.
# 이후 n-1개의 원판을 기둥 2에서 기둥 3으로 옮긴다.(요약)
# 즉, n-1개의 원판을 원하는 곳으로 옮길 수만 있다면 n개의 원판을 처리할 수 있다. -> 재귀

# 귀납정 정의 :
# 원판이 1개일 때 원판을 내가 원하는 곳으로 옮길 수 있다.
# 원판이 k개일 때 옮길 수 있으면 원판이 k+1개일 때에도 옮길 수 있다.


# 1. 함수의 정의
#     def func(a,b,n) -> 원판 n개를 a번 기둥에서 b번 기둥으로 옮기는 방법을 출력하는 함수
# 2. base condition
#     n = 1 일때 print(f"{a} {b}")
# 3. 재귀 식
#     n-1개의 원판을 기둥 a에서 기둥 6-a-b로 옮긴다. (기둥이 1,2,3 이므로 6-a-b는 a,b가 아닌 나머지 기둥)
#     --> func(a, 6-a-b, n-1)
#     n번 원판을 기둥 a에서 기둥 b로 옮긴다. --> print(f"{a} {b}")
#     n-1개의 원판을 기둥 6-a-b에서 기둥 b로 옮딘다. --> func(6-a-b, b, n-1)
# 4. 총 옮긴 횟수 일반항 = 2^n - 1


def func(a, b, n):
    if n == 1:
        print(f"{a} {b}")
        return
    func(a, 6 - a - b, n - 1)
    print(f"{a} {b}")
    func(6 - a - b, b, n - 1)


n = int(input())
print(2**n - 1)
func(1, 3, n)

# [func(1, 3, 3)
#     [func(1,2,2)
#         [func(1,3,1)
#             1 -> 3]
#         1 -> 2
#         [func(3,2,1)
#             3 -> 2]]
#     1 -> 3
#     [func(2,3,2)
#         [func(2,1,1)
#             2 -> 1]
#         2 -> 3
#         [func(1,3,1)
#             1 -> 3]]
# ]
